---
title: "Gentle Introduction to R"
subtitle: "Princeton University"
author: "Jason Geller, PH.D. (He/Him)"
date: 'Updated:`r Sys.Date()`'
footer: "PSY 503: Foundations of Statistics in Psychology"
format: 
  revealjs:
    theme: psy504.css
    multiplex: true
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
execute:
  freeze: auto
  echo: true
  message: false
  warning: false
  fig-align: "center"
editor_options: 
  chunk_output_type: inline
---

## Objective

::: columns
::: {.column width="50%"}
-   Get you started with R

-   Load your first dataset in R

-   Explain some basic terminology and concepts
:::

::: {.column width="50%"}
-   Explain how to structure any data analysis project

-   Learn how to run commands and save scripts
:::
:::

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "30%"

knitr::include_graphics("lover.png")
```

## It's Scary

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "65%"

knitr::include_graphics("nocluedog.png")
```

## Note

-   You can learn R!

-   You will get frustrated.

-   You will get errors that don't help or make sense.

    -   Google is your friend.
        -   Try Googling the specific error message first.
        -   Then try googling your specific function and the error.
        -   Try a bunch of different search terms.
    -   ChatGPT

# Outline

-   Why R

-   IDE

-   R commands, data structures, and functions

    -   Tidyverse & the Pipe Operator

    -   Multiple Functions

-   Reading in data

-   Saving R scripts

## Why R?

::: columns
::: {.column width="50%"}
-   Free and open-source
-   Flexibility
-   Programming language (not point-and-click)
-   Excellent graphics (via `ggplot2`)
:::

::: {.column width="50%"}
-   Easy to generate reproducible reports (markdown and quarto)
-   Easy to integrate with other tools and programs
-   Inclusive community
-   Marketability
:::
:::

# Outline

-   Why R?

-   *`IDE`*

-   R commands, data structures, and functions

-   Tidyverse & the Pipe Operator

-   Multiple Functions

-   Reading in data

-   Saving R scripts

## IDE

![](https://bookdown.org/ndphillips/YaRrr/images/RStudio_Screenshot_Labels.png){fig-align="center"}

## IDE

-   Make it your own!

![](https://i0.wp.com/cdn.r-bar.net/PID1174/SuperDarkMode.jpg?zoom=2&w=578&ssl=1){fig-align="center"}

# Outline

-   Why R?

-   IDE

-   *`R commands, data structures, and functions`*

-   Tidyverse & the Pipe Operator

-   Multiple Functions

-   Reading in data

-   Saving R scripts

## Commands

-   Commands are the code that you tell R to do for you.

-   They can be very simple or complex.

-   Computers do what *you* tell them to do. Mistakes happen!

    -   Maybe it's a typo, maybe it's a misunderstanding of what the code does

-   You can type a command directly into the *console*

-   You can type in a document (*Script* or *Markdown*) and tell it to then run in the *console*

```{r}
X <- 4
```

## Commands

-   `>` indicates the console is ready for more code

-   `+` indicates that you haven't finished a code block

-   Capitalization and symbols matter

-   Hit the up arrow -- you can scroll through the last commands that were run

-   Hit the tab key -- you'll get a list of variable names and options to select from

-   Use the `?` followed by a command to learn more about it

## Comments

::: columns
::: {.column width="50%"}
![](https://www.explainxkcd.com/wiki/images/3/3b/future_self.png){fig-align="center"}
:::

::: {.column width="50%"}
-   You can make comments on your code using the `#` symbol

-   Comments are not processed by R, they provide documentation of your code for humans

-   Feel free to comment your personal code as much as you need to in order to understand it

-   Try to make your code clear enough that it can be understood even without comments
:::
:::

```{r}
#this does something
#this does not work because I am stupid
x=4 #assign 

```

## Assignment

-   A variable is a symbol or object that stands for another value (just like "X" in algebra)

```{r}

x <- 4

x

```

-   The arrow `<-` is called an ASSIGNMENT OPERATOR, and tells R to save an object called x that has the value of 6. This is similar to saving a value in a graphing calculator.

-   Can use `=` if you want

## Objects and values

-   We will use the terms **object** and **variable** a lot when talking about code in this class

-   `Objects` are things you save in your environment (like a set of numbers, a dataset, or a regression model)

-   We will use the word `Variable` to refer to columns of a data frame and to data variables that we use in models

## Vectors

-   Think of it as a row or column in a spreadsheet

-   Allows same classes to be concatenated together

    -   Numeric

```{r}

x <-  c(2,6,16)

x

```

## Vectors

-   Character

```{r}
x <- c("cat", "bat")

gender <- c("male", "female")
```

```{r}

gender <- as.factor(gender)

gender

```

-   Logical

```{r}

x==7

```

## Indexing

-   Vectors can be indexed

    -   1 not 0 (looking at you Python)

```{r}

x[1] # retreve first
x[-2] # everything but that number
x[1] <- 7 # Change values in vector
```

## Lists

-   While vectors are one row of data, we might want to have multiple rows or types

-   With a vector, it is *key* to understand they have to be all the same type

-   Lists are a grouping of variables that can be multiple types (between list items) and *can be different lengths*

-   Often function output is saved as a list for this reason

-   They usually have names to help you print out just a small part of the list

```{r}

library(palmerpenguins)

output <- lm(flipper_length_mm ~ bill_length_mm, data = penguins)
str(output)
```

## R as a calculator

-   Typing in a simple calculation show us the result

```{r}
608+ 28

```

```{r}
11527-283

```

```{r}
# divison
400/65
#multiplication
2*4
#exponentiation
5^2
```

## Functions

-   Take an object, do something to it, and return the result

-   More complex calculations can be done with functions:

    -   What is square root of 64?

```{r}
# sqrt function
# in parenthesis: what we want to perform function on
sqrt(64)
```

```{r}
#| eval = FALSE

sr=function(a, b){
  c=a + b
  return(c)
}

sr(2,3)
```

## Arguments

-   Some functions have settings ("arguments") that we can adjust:

-   `round(3.14)`

    -   Rounds off to the nearest integer (zero decimal places)

-   `round(3.14, digits=1)`

    -   One decimal place

## Getting Help

1.  Help files

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "100%"

knitr::include_graphics("help.png")
```

## Exercise 1

1.  Open a blank new script

    1.1 File -\> New File \> R Script

    1.2 Ctrl + Shift + N

    1.3 Click on new script icon

2.  To paste strings together you can use the `paste`() function (e.g., paste("Hello", "World")). Use ?paste or Google "paste function in R" to get an idea of how to use this function.

    2.1 Use the `paste` function to string together a sentence of your choice. Assign it to a variable or object.

3.  Modify the function above and instead of returning the sum return the product.

# Outline

-   Why R

-   IDE

-   R commands & functions

    -   `Tidyverse & the Pipe Operator`

-   Multiple Functions

-   Reading in data

-   Saving R scripts

## Tidyverse and pipes

-   The `tidyverse` is an ecosystem of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "40%"

knitr::include_graphics("hex.png")
```

## Installing Tidyverse

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "40%"

knitr::include_graphics("cran.png")
```

```{r}
#| eval = FALSE

install.packages(tidyverse)
```

-   Load package

```{r}

library(tidyverse)

```

## Pipes

-   `tidyverse` provides another interface to functions---the pipe operator

    -   Makes code easier to read and follow:

-   This:

```{r}
#| eval = FALSE

a %>% 
  round()
```

--

-   Can be converted into:

    -   Start with a and then round

-   `|>` pipe is slowly becoming more popular

# Outline

-   Why R

-   IDE

-   R commands & functions

    -   Tidyverse & the Pipe Operator

-   `Multiple Functions`

-   Reading in data

-   Saving R scripts

## Multiple Functions

-   Pipe operator makes it easy to do multiple functions in a row

```{r}
#| eval = FALSE

-16 %>% 
  sqrt() %>%
  abs()
```

-   What is this doing?

# Outline

-   Why R

-   IDE

-   R commands & functions

    -   Tidyverse & the Pipe Operator

-   Multiple Functions

-   `Reading in data`

-   Saving R scripts

## Reading in data

-   Download the file

```{r}
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "100%"

knitr::include_graphics("readr.png")
```

-   General form: `dataframe.name <-read.csv('filename')`

## Data frames

> A data frame is like an Excel spreadsheet. It is two-dimensional with rows and columns.

-   Instead of creating a number of vectors we store all the vectors into a single DF

-   Can store numeric data (phone number, postal code, coordinates, etc.), float data (internet IP address, etc.), logical data (wants to receive ads: FALSE/TRUE, etc.), etc.

```{r}

car_model <- c("Ford Fusion", "Hyundai Accent", "Toyota Corolla")
car_price <- c(25000, 16000, 18000)
car_mileage <- c(27, 36, 32)

cars_df <- data.frame(model=car_model, price=car_price, mileage=car_mileage)

flextable::flextable(cars_df)%>% flextable::autofit()


```

## Tibbles

-   More modern take on Data frames

    -   Never changes input's type
    -   Never adjusts the names of variables
    -   It evaluates arguments lazily and sequentially

-   Differences

    -   Printing

```{r}
#| eval = FALSE

as.tibble()


```

## Matrices

-   Matrices are vectors with dimensions (like a 2X3)

-   All the data *must be the same type*

```{r}
myMatrix <- matrix(data = 1:10,
                   nrow = 5,
                   ncol = 2)
myMatrix
```

## Working directories

-   `Here` package

    -   `Here` helps set relative as opposed to absolute paths

        -   Why would this be a problem?

        . . .

```{r}
#| eval = FALSE

#setwd("your path here")

```

```{r}
#| out.width = "50%"
#install here
library(here)

# here

here::here()

# can use with read.csv
```

## Loading the Data

::: callout-note
**Always create an R project before you start**
:::

## Aside: Naming Conventions

-   Object names are case-sensitive!!

-   Typing in data to call an object named Data will fail

-   Object names can contain letters, numbers, underscores "\_" and periods "."

-   In most cases you should use snake_case to name objects

-   Avoid periods

-   use_an_underscore_between_words

-   Names should be short and descriptive, with descriptive being the most important feature

## Loading the data

-   You can download data directly from OSF or Github
    -   https://osf.io/qh9rb/

The faculty dataset contains aggregated data per faculty:

-   faculty: Business, Economics, Political Science, Sociology
-   students: number of students
-   profs: number of profs
-   salary: amount of salary
-   costs: amount of costs dataset entails demographic and school-related information on imaginary students, such as

## Load the data

-   CSV

```{r}
library(kableExtra)

fac=read.csv(here::here("slides", "02-R", "datasets", "faculty.csv"))

fac %>% 
  kbl() %>%
  kable_material_dark()

```

## Load data from osf

```{r}

# try using the url 


```

## Looking at Data

```{r}

fac%>%
  summary()

```

## Looking at Data

```{r}

library(skimr)
library(flextable)

fac%>%
  skim() %>% 
  kbl() %>%
  kable_material_dark()
```

## Looking at the Data

-   Select specific columns

    -   use \$ operator to grab one column

```{r}
fac$column_name %>% 
  summary() 

```

```{r}
#| eval = FALSE

fac%>% 
  select(column_name) %>%
  summary() %>% 
 

```

## Looking at the Data

```{r}

fac # whole dataset

head(fac)
tail(fac)
```

## Looking at Data

```{r}
# look at specific variables
table(fac$students)
```

```{r}
# let's try another package
library("janitor")
tabyl(fac$students)
```

------------------------------------------------------------------------

## Reading other File types

-   Excel

```{r}
#| eval = FALSE

library(readxl)

fac<-  read_excel('/Users/jg/Desktop/experiment.xlsx', sheet=2)
# excel files can have multiple sheets
```

-   SPSS

```{r}
#| eval = FALSE

library(haven)

fac<-  read_spss('/Users/jg/Desktop/experiment.spss')

```

# Outline

-   Why R

-   IDE

-   R commands & functions

    -   Tidyverse & the Pipe Operator

-   Multiple Functions

-   Reading in data

-   `Saving R scripts`

## Saving Files

```{r}
#| eval = FALSE

write.csv(fac, file="df.csv")

write.table(fac, file="df.txt")


```

# Wrapping Up

-   You've learned:

    -   Some basic programming terminology

    -   Specific *R* defaults and issues

    -   Example functions and use cases

-   How do I get started?

    -   Practice!

## Helpful Websites

-   Google!
-   Cheat sheets (https://rstudio.cloud/learn/cheat-sheets)
-   Quick-R: www.statmethods.net
-   R documentation: www.rdocumentation.org
-   Swirl: www.swirlstats.com
-   Stack Overflow: www.stackoverflow.com
-   Learn Statistics with R: https://learningstatisticswithr.com/

## Exercise 2

1.  Create a variable called y with the value of 7

2.  Save the results of 6 + 3 as a variable called a.

3.  Create a new project folder for this course entitled "psy_503" (run the .Rproj file)

3.1 Place the exercise.csv file in the folder

5.  Using `here` assign the file to a name of your choice

6.  Explore the data set by running the commands head(data), str(data), glimpse(data) and summary(data) in your R script. You will use these a lot in the future, so have a closer look at the different outputs in the console (lower left). Remember to save your script!

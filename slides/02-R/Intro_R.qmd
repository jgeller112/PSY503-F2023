---
title: "Crash Course in R"
subtitle: "Princeton University"
author: "Jason Geller, PH.D."
date: 'Updated:`r Sys.Date()`'
footer: "PSY 503: Foundations of Statistics in Psychology"
format: 
  revealjs:
    theme: psy504.css
    multiplex: true
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true

execute:
  freeze: auto
  echo: true
  message: false
  warning: false
  fig-align: center
  fig-width: 12
  fig-height: 8
  editor_options: 
  chunk_output_type: inline
  code-overflow: wrap
  html:
    code-fold: true
    code-tools: true
---

## Packages

```{r}
#| echo: false
#| 
library(tidyverse)
library(palmerpenguins)
library(gt)
library(grateful)


```

```{r}
#| echo: false
#| 
pkgs <- cite_packages(output = "table", out.dir = ".")

knitr::kable(pkgs[1])


```

## Objective

::: columns
::: {.column width="50%"}
-   Get you familiar with R

-   Explain some basic terminology and concepts

-   Learn how to run commands and save scripts

-   Manipulate data

-   Load and save data
:::
:::

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "30%"

knitr::include_graphics("lover.png")
```

## It's scary

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "65%"

knitr::include_graphics("nocluedog.png")
```

## Note

-   You can learn R!

-   You will get frustrated

-   You will get errors that don't help or make sense

    -   Google is your friend
        -   Try Googling the specific error message first
        -   Then try googling your specific function and the error
        -   Try a bunch of different search terms.
    -   ChatGPT (use wisely)
    -   Me :)

# Outline

-   `Why R`

-   IDE

-   R commands, data structures, and functions

-   Tidyverse & the Pipe Operator

-   Reading in data

-   Manipulating data

-   Saving data

## Why R?

::: columns
::: {.column width="50%"}
-   Free and open-source
-   Flexibility
-   Programming language (not point-and-click)
-   Excellent graphics (via `ggplot2`)
:::

::: {.column width="50%"}
-   Easy to generate reproducible reports (markdown and quarto)
-   Easy to integrate with other tools and programs
-   Inclusive community
-   Marketability
:::
:::

# Outline

-   Why R?

-   *`IDE`*

-   R commands, data structures, and functions

-   Tidyverse & the pipe operator

-   Multiple functions

-   Reading in data

-   Saving R scripts

## RStudio IDE

![](https://bookdown.org/ndphillips/YaRrr/images/RStudio_Screenshot_Labels.png){fig-align="center"}

## RStudio IDE

-   Make it your own!

![](https://i0.wp.com/cdn.r-bar.net/PID1174/SuperDarkMode.jpg?zoom=2&w=578&ssl=1){fig-align="center"}

# Outline

-   Why R?

-   RStudio

-   *`R commands, data structures, and functions`*

-   Tidyverse & the pipe operator

-   Reading in data

-   Saving R scripts

## Commands

-   Commands are the code that you tell R to do for you

-   They can be very simple or complex

-   Computers do what *you* tell them to do. Mistakes happen!

    -   Maybe it's a typo, maybe it's a misunderstanding of what the
        code does

-   You can type a command directly into the *console*

-   You can type in a document (*Script* or *Markdown/Quarto*) and tell
    it to then run in the *console*

```{r}
X <- 4
```

## Commands

-   `>` indicates the console is ready for more code

-   `+` indicates that you haven't finished a code block

-   Capitalization and symbols matter

-   Hit the up arrow -- you can scroll through the last commands that
    were run

-   Hit the tab key -- you'll get a list of variable names and options
    to select from

-   Use the `?` followed by a command to learn more about it

## Comments

::: columns
::: {.column width="50%"}
![](https://www.explainxkcd.com/wiki/images/3/3b/future_self.png){fig-align="center"}
:::

::: {.column width="50%"}
-   You can make comments on your code using the `#` symbol

-   Comments are not processed by R, they provide documentation of your
    code for humans

-   Feel free to comment your personal code as much as you need to in
    order to understand it

-   Try to make your code clear enough that it can be understood even
    without comments
:::
:::

```{r}
#this does something
#this does not work because I am stupid
x=4 #assign 4 to x 

```

## Assignment

-   Few different way to assign values to objects

```{r}

#left arrow operator
x <- 4

```

-   The arrow `<-` is called an ASSIGNMENT OPERATOR, and tells R to save
    an object called x that has the value of 4.

-   Can use `=` if you want

-   Even `->` (please dont do this)

## Objects and values

-   We will use the terms **object** and **variable** a lot when talking
    about code in this class

-   `Objects` are things you save in your environment (like a set of
    numbers, a dataset, or a regression model)

-   `Variable` refers to columns of a data frame and to data variables
    that we use in models

## Vectors

-   Think of it as a row or column in a spreadsheet

-   Allows same classes to be concatenated together

    -   Numeric

```{r}

x <-  c(2,6,16)

x

```

## Vectors

-   Character

```{r}
x <- c("cat", "bat")

gender <- c("male", "female")
```

-   Factors

```{r}

gender <- as.factor(gender)

gender

```

-   Logical

```{r}

x==7

```

## Data frames

> A data frame is like an Excel spreadsheet. It is two-dimensional with
> rows and columns.

::: columns
::: {.column width="50%"}
-   Instead of creating a number of vectors we store all the vectors
    into a single DF

-   Can store numeric data (phone number, postal code, coordinates,
    etc.), float data (internet IP address, etc.), logical data (wants
    to receive ads: FALSE/TRUE, etc.), etc
:::

::: {.column width="50%"}
```{r}


car_model <- c("Ford Fusion", "Hyundai Accent", "Toyota Corolla")
car_price <- c(25000, 16000, 18000)
car_mileage <- c(27, 36, 32)

cars_df <- data.frame(model=car_model, price=car_price, mileage=car_mileage)

cars_df %>%
  knitr::kable()



```
:::
:::

## Tibbles

-   Modern take on data frames

    -   Tidy data!

        -   Each variable forms a column

        -   Each observation forms a row

        -   Each cell is a single measurement

## Tibbles

::: columns
::: {.column width="50%"}
-   Never changes input's type
-   Never adjusts the names of variables
-   It evaluates arguments lazily and sequentially
:::

::: {.column width="50%"}
-   differences

    -   Only prints first 6 rows
:::
:::

## Matrices

-   Matrices are vectors with dimensions (like a 2X5)

-   All the data *must be the same type*

```{r}
myMatrix <- matrix(data = 1:10,
                   nrow = 5,
                   ncol = 2)
myMatrix
```

## Lists

::: columns
::: {.column width="50%"}
-   While vectors are one row of data, we might want to have multiple
    rows or types

-   With a vector, it is *key* to understand they have to be all the
    same type

-   Lists are a grouping of variables that can be multiple types
    (between list items) and *can be different lengths*

-   Often function output is saved as a list for this reason

-   They usually have names to help you print out just a small part of
    the list
:::

::: {.column width="50%"}
```{r}

library(palmerpenguins)

output <- lm(flipper_length_mm ~ bill_length_mm, data = penguins)
str(output)
```
:::
:::

## Indexing

-   Vectors can be indexed

    -   1 not 0 (ðŸ‘€ Python)

```{r}
x=c(1,2,3,4)
x[1] # ret first
x[-2] # everything but that number
x[1] <- 7 # Change values in vector
x
```

## R as a calculator

-   Typing in a simple calculation show us the result

```{r}
#add
608+ 28
#subtract
11527-283
# divison
400/65
#multiplication
2*4
#exponentiation
5^2
```

## Functions

-   Take arguments, do something to them, and return the result

-   More complex calculations can be done with functions:

    -   What is square root of 64?

```{r}
# sqrt function
# in parenthesis: what we want to perform function on
sqrt(64)
```

```{r}
#| eval = FALSE

sr=function(a, b){
  c=a + b
  return(c)
}

sr(2,3)
```

## Arguments

-   Some functions have settings ("arguments") that we can adjust:

-   `round(3.14)`

    -   Rounds off to the nearest integer (zero decimal places)

-   `round(3.14, digits=1)`

    -   One decimal place

## Getting Help

1.  Help files

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "100%"

knitr::include_graphics("help.png")
```

## Exercise

1.  Open a blank new script

    1.1 File -\> New File \> R Script

    1.2 Ctrl + Shift + N

    1.3 Click on new script icon

2.  To paste strings together you can use the `paste`() function (e.g.,
    paste("Hello", "World")). Use ?paste or Google "paste function in R"
    to get an idea of how to use this function.

    2.1 Create three vectors. One vector should have three first names.
    The second vector should have 3 last names. Finally, the third
    vector should have 3 ages. Use the `paste` function to string
    together these vectors separated by a `_`

    ```{r}

    ```

3.  Modify the function below and instead of returning the sum, return
    the mean

    ```{r}
    mean=function(a, b){
      c=a + b
      return(c)
    }

    ```

# Outline

-   Why R

-   IDE

-   R commands & functions

-   `Tidyverse & the pipe operator`

-   Reading in data

-   Saving R scripts

## Tidyverse and pipes

-   The `tidyverse` is an ecosystem of R packages designed for data
    science. All packages share an underlying design philosophy,
    grammar, and data structures.

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "40%"

knitr::include_graphics("hex.png")
```

## Installing Tidyverse

```{r}
#| fig.align = "center",
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "40%"

knitr::include_graphics("cran.png")
```

```{r}
#| eval = FALSE

install.packages(tidyverse)
```

-   Load package

```{r}

library(tidyverse)

```

## Pipes

-   `tidyverse` provides another interface to functions

    -   the pipe operator

        -   Makes code easier to read and follow:

-   This:

```{r}
#| eval = FALSE

a %>% 
  round()
```

-   Can be converted into:

    -   Start with a and then round

-   `|>` pipe is slowly becoming more popular

## Multiple functions

-   Pipe operator makes it easy to do multiple functions in a row

```{r}
#| eval: false

-16 %>%
  abs()%>%
  sqrt()


-16 |> 
  abs() |>
  sqrt()

```

-   What is this doing?

# Outline

-   Why R

-   IDE

-   R commands & functions

-   Tidyverse & the pipe operator

-   `Reading in data`

-   Saving R scripts

## Reading in data

-   Download the file

```{r}
#| echo = FALSE,
#| warning = FALSE,
#| out.width = "100%"

knitr::include_graphics("readr.png")
```

-   General form: `dataframe.name <-read_csv('filename')`

## Reading other file types

-   Excel

```{r}
#| eval = FALSE

library(readxl)

fac<-  read_excel('/Users/jg/Desktop/experiment.xlsx', sheet=2)
# excel files can have multiple sheets
```

-   SPSS

```{r}
#| eval = FALSE

library(haven)

fac<-  read_spss('/Users/jg/Desktop/experiment.spss')

```

## Working directories

::: columns
::: {.column width="50%"}
![](images/here.PNG){fig-align="center"}
:::

::: {.column width="50%"}
-   `Here` package

    -   `Here` helps set relative as opposed to absolute paths
:::
:::

## Here

```{r}
#| eval = FALSE

#setwd("your path here")

```

```{r}
#| out.width = "50%"
#install here
library(here)

# here

here::here()

# can use with read.csv
```

## Loading the data

::: callout-note
**Always create an R project before you start**
:::

## Aside: naming conventions

-   Variable names in DFs are case-sensitive

-   Variable names can contain letters, numbers, underscores "\_" and
    periods "."

    -   In most cases you should use snake_case to name objects

    -   use_an_underscore_between_words

    -   Avoid periods

-   Names should be short and descriptive, with descriptive being the
    most important feature

## Janitor

![](images/janitor.PNG){fig-align="center"}

## Loading the data

-   You can download data directly from OSF or Github
    -   https://osf.io/cmtxa

The faculty dataset contains aggregated data per faculty:

-   faculty: Business, Economics, Political Science, Sociology
-   students: number of students
-   profs: number of profs
-   salary: amount of salary
-   costs: amount of costs dataset entails demographic and
    school-related information on imaginary students, such as

## 

## Load data from OSF

```{r}
#| echo: false

fac <- read_csv("https://osf.io/cmtxa/download")



```

## Looking at data

```{r}

fac%>%
  summary()

```

## Looking at data

```{r}
library(skimr)
fac%>%
  skim() %>% 
 gt()
```

## Looking at data

-   Select specific columns

    -   use \$ operator to grab one column

        ```{r}
        #| eval = FALSE
        fac

        ```

```{r}
#| eval = FALSE

fac%>% 
  select(column_name) %>%
  summary() %>% 
 

```

## Looking at data

```{r}

fac # whole dataset
head(fac)
tail(fac)
```

## Looking at data

```{r}
# look at specific variables
table(fac$students)
```

```{r}
# let's try another package
library("janitor")
tabyl(fac$students)
```

# Outline

-   `Why R`

-   IDE

-   R commands, data structures, and functions

-   Tidyverse & the Pipe Operator

-   Reading in data

-   `Manipulating data`

-   Saving R scripts

## Manipulating data

-   `dplyr` is organized around verbs that manipulate data frames

-   Isolating data:

    -   `select`
    -   `filter`
    -   `arrange`
    -   `mutate`
    -   `summarize`

## Select

![](select.svg){fig-align="center"}

## Palmer penguins

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png){fig-align="center"}

```{r}

df = palmerpenguins::penguins

df %>% 
  head() %>%
  knitr::kable()
```

## Select columns

The `select` command from `dplyr` allows you to subset columns matching
strings:

```{r}
select(df, sex, year) %>%
  head() %>% 
  knitr::kable()

```

## Select helpers

![](select_helpers.svg){fig-align="center"}

## Select columns

If you wanted it to be a single vector (not a `tibble`), use `pull`:

```{r}
pull(select(df, sex))
```

## Filter

![](images/filter.PNG){fig-align="center"}

## Filter

```{r}
df %>% 
filter(sex=="male") %>%
  head()
```

Note, no `$` or subsetting is necessary

## Filter

You can have multiple logical conditions using the following:

-   `==` : equals to
-   `!` : not/negation
-   `>` / `<`: greater than / less than
-   `>=` or `<=`: greater than or equal to / less than or equal to
-   `&` : AND
-   `|` : OR
-   `is.na(x)`: is NA
-   `!is.na(x)`: is not NA

## Common mistakes

-   Using `=` instead of `==`

```{r}
#| eval: false
filter(df, sex=1)

```

-   Forgetting quotes

```{r, eval=FALSE}

filter(df, Name==John)

filter(df, Name=="John")

```

## Exercise

-   Return a df that only has NA for `sex`

```{r}

```

## Mutate

![](images/mutate.PNG){fig-align="center"}

## Mutate

```{r}
df %>% 
  #combines what is in species and #what is island together with #underscore
  mutate(spec_island=paste(species,island, sep="_")) %>%
  head()
```

## Creating conditional (if-else) variables

-   A general function for creating new variables based on existing
    variables is the `ifelse()` function, which returns a value with the
    same shape as test which is filled with elements selected from
    either yes or no depending on whether the element of test is `TRUE`
    or `FALSE`.

```{r}
#| eval: false
#| 
ifelse(test, yes, no)

# test: an object which can be coerced
#to logical mode.
# yes: return values for true elements of test.
# no: return values for false elements of test.
```

## Adding columns

-   Mutate combined with `ifelse(condition, TRUE, FALSE)`, it can give
    you:

```{r}

df = mutate(df, 
            island_num = ifelse(
              island=="Biscoe",
              "first_island", ifelse(
              island== "Dream", "second_island", 
              "third_island")
            )
)
head(df$island_num)
```

## Case_when

::: columns
::: {.column width="50%"}
![](images/case_when.PNG){fig-align="center" width="605" height="416"}
:::

::: {.column width="50%"}
```{r}
df = mutate(df, 
            island_num = case_when(
              island=="Biscoe" ~ "first_island",
              island=="Dream" ~ "second_island",
              TRUE ~ "third_island"
            ))
df %>%
  select(island_num) %>%
  head() %>%
  knitr::kable()

```
:::
:::

## Exercise

> See if you can use the logical operators to manipulate our penguins
> data using `%>%`

-   All of the penguin data from year 2007

-   All of the female penguins

-   Get flipper length \> 150

-   Order from smallest to largest flipper

-   Select only the flipper length and species columns

## Summarize

-   Create summary statistics (mean, median, SD, sum)

    -   Use with `group_by`

```{r}




```

# Outline

-   Why R

-   IDE

-   R commands & functions

-   Tidyverse & the pipe operator

-   Reading in data

-   Manipulating data

-   `Saving R scripts`

## Saving files

```{r}
#| eval = FALSE

write.csv(fac, file="df.csv")

write.table(fac, file="df.txt")


```

## Wrapping up

-   You've learned:

    -   Some basic programming terminology

    -   Specific *R* defaults and issues

    -   Example functions and use cases

-   How do I get started?

    -   Practice!

# Helpful websites

-   Google!
-   Cheat sheets (https://rstudio.cloud/learn/cheat-sheets)
-   Quick-R: www.statmethods.net
-   R documentation: www.rdocumentation.org
-   Swirl: www.swirlstats.com
-   Stack Overflow: www.stackoverflow.com
-   Learn Statistics with R: https://learningstatisticswithr.com/

---
title: "RMD/Quarto"
subtitle: "Princeton University"
author: "Jason Geller, PH.D.(He/Him)"
date: 'Updated:`r Sys.Date()`'
footer: "PSY 503: Foundations of Statistics in Psychology"
format: 
  revealjs:
    theme: blood
    multiplex: true
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
execute:
  freeze: auto
  echo: false
  message: false
  warning: false
  fig-align: "center"
  fig-height: 4
  fig-width: 8
editor_options: 
  chunk_output_type: inline
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| echo = FALSE

library(emo)


```

## What are we going to cover?

-   **Markdown:** a simple text-only format for writing documents
-   **R markdown:** a tool for mixing R code with markdown
    -   **Quarto**
-   **Papaja:** Tool for writing APA style articles in RMD
-   **Apaquarto**: Tool for writing APA style articles in QMD

## Packages

-   If you load `tidyverse` you already have R markdown!
-   You should install `tinytex`

```{r}
#| echo = TRUE,
#| eval = FALSE

install.packages('tinytex')
tinytex::install_tinytex()
# to uninstall TinyTeX, run tinytex::uninstall_tinytex() 

```

## RMD is a "chimera"

::: columns
::: {.column width="50%"}
![](img/chimera.jpg){fig-align="center"}
:::

::: {.column width="50%"}
::: {.column width="50%"}
On the input side:

-   Write text in markdown
-   Insert code using R
-   Write "metadata" with YAML
-   Insert equation with LaTeX
:::
:::
:::

## RMD is a "chimera"

::: columns
::: {.column width="50%"}

![](img/chimera.jpg)
:::

::: {.column width="50%"}
On the output side:

-   HTML

-   DOC

-   PDF
:::
:::

# The Problem

## Word

![](img/word_document_surface.png){fig-align="center"}

## Inside

![](img/word_document_inside.png){fig-align="center"}

## Word issues

-   A .docx file is a compressed folder with lots of files
    -   Your text is buried in with a lot of formatting information
-   Not reproducible
    -   Code is divorced from writing
-   Difficult to maintain
    -   Errors!
-   What do I share?
    -   Lack of transparency

## HTML documents are also complicated

::: columns
::: {.column width="50%"}
![](img/html_document_surface.png){fig-align="center"}
:::

::: {.column width="50%"}
![](img/html_document_inside.png){fig-align="center"}
:::
:::

## Microsoft Excel hids errors

\- Francesa Gino

![](https://poetsandquants.com/wp-content/uploads/sites/5/2023/08/Francesca-Gino.jpg){fig-align="center"}

# Why Markdown?

## What do we want?

-   Something that... you can write in **plain text**
-   Something that... is **human readable**
-   Something that... allows **formatting**
-   Something that... can **build** to something pretty

## Here's an example of a markdown document...

![](images/Screen%20Shot%202023-09-14%20at%2010.34.26%20AM.png){fig-align="center"}

## Introduction

Welcome to my **awesome** class. You will learn all kinds of useful
things about R markdown.

# Okaaaaay, but this seems boring?

# Let me show you where it can take you

## Professional websites

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "50%", 
#| fig.align = "center"
knitr::include_graphics("img/example_professional_site.png")
```

## Visual blogs

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "50%", 
#| fig.align = "center"

knitr::include_graphics("img/example_visual_blog.png")
```

## Books

![](img/lakens_book.png){fig-align="center"}

## Academic papers

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%", 
#| fig.align = "center"

knitr::include_graphics("img/example_papers.png")
```

## Slide decks

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "80%", 
#| fig.align = "center"

knitr::include_graphics("img/example_slides.png")
```

## Resumes/CVs

![](img/modern-cv.webp){fig-align="center"}

# Formatting

# Header 1

-   Using a single \# gives you a really large header!

## Header 2

-   Using two gives you a slightly smaller header!

### Header 3

...and on

#### Header 4

...and on

##### Header 5

...and on

## Creating lists

You may also want to use a bulleted list!

::: columns
::: {.column width="50%"}
-   just
-   like
-   this
-   one
:::

::: {.column width="50%"}
1.  like

2.  this

3.  one
:::
:::

## Emphasis

![](img/emp.jpg){fig-align="center"}

## Hyperlinks

-   \<https:://placekitten.com/200/300\>

-   \[Kittens\](https:://placekitten.com/200/300)

## Images

-   Local images

    -   \![\](./img/)

    -   \![\]https:://placekitten.com/200/300)

# R Markdown

## What do we want?

-   Something that... lets you write text in **markdown**
-   Something that... lets you include **R code** or Python (e.g. for
    data vis)
-   Something that... can **build** to HTML, PDF, Word, etc

# Live Demo

# Let's dissect the document we just wrote!

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%"
knitr::include_graphics("img/my_first_rmd_plain.png", dpi = 200)
```

## The part inside is the "YAML header"

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%"
knitr::include_graphics("img/my_first_rmd_yaml.png", dpi = 200)
```

## Code chunk

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%"
knitr::include_graphics("img/my_first_rmd_r.png", dpi = 200)
```

## The rest is markdown

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%"
knitr::include_graphics("img/my_first_rmd_markdown.png", dpi = 200)
```

## The YAML header is used for customisation

```{r}
#| echo = FALSE,
#| out.height = "70%",
#| out.width = "60%"
knitr::include_graphics("img/my_first_rmd_yaml.png", dpi = 200)
```

## Wait... what's the YAML acronym?

-   Originally: "Yet Another Markup Language"
-   Later: "YAML Ain't Markup Language"
-   ... it really doesn't matter `r emo::ji("face_with_rolling_eyes")`

## Output HTML only

```         

title: "My First R Markdown Document"
author: "Jason Geller"
date: "9/15/2021"
output: html_document
```

## Output HTML and PDF

```         

title: "My First R Markdown Document"
author: "Jason Geller"
date: "09/15/2023"
output:
  pdf_document: default
  html_document: default
```

\- Notice the indentation - YAML is *very* picky about this

## Themes for HTML documents

```         

output: 
  html_document:
    theme: readabl
```

**Possible themes**: default, cerulean, journal, flatly, darkly,
readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex,
yeti

## Table of contents

```         
output:
  html_document:
    toc: true
    toc_float: true
```

-   Practice editing the YAML header
-   Try creating different outputs and themes
-   Try creating a floating table of contents
-   Try to get it to not float!

## Code chunks

![](img/code_chunks.jpeg){fig-align="center"}

# Equations

## An overview

-   Anything inside dollar signs `$` is treated as "inline" maths
-   `$$` is a standalone equation
-   Whitespace matters: `$x$` is an equation, `$x $` is not
-   Equations follow "LaTeX" rules

## Equations are special

-   This $x^2$ is inline

-   This equation is standalone
    $$\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_i$$

## R markdown advantages

-   Explicitly link R code to output

-   Wide variety of formats

-   Increases transparency

-   Increases efficiency

# Hello Quarto!

-   Quarto is the next generation of RMarkdown

## Big universe

-   RMarkdown for EVERYONE

![](img/horst_quarto_schematic.png){fig-align="center"}

## What is a Quarto?

![](https://psy504-advanced-stats.netlify.app/slides/quarto/samplesheet.jpeg){fig-align="center"}

# Formatting

## Visual editor

-   One fairly new feature (and one reason we're using RStudio today!)
    is their new [visual markdown
    editor](https://rstudio.github.io/visual-markdown-editing/). It's
    basically an ultra powerful hybrid of Markdown and Microsoft Word.
    But be warned, it's a little buggy if you frequently switch editing
    modes.

-   People write whole books in Markdown, and this may make that seem a
    little more achievable. For example, the new visual editor allows
    [easy citation management with a Zotero
    library](https://www.rstudio.com/blog/rstudio-1-4-preview-citations/)

# Header 1

-   Using a single \# gives you a really large header!

## Header 2

-   Using two gives you a slightly smaller header!

### Header 3

...and on

#### Header 4

...and on

##### Header 5

...and on

## Lists

You may also want to use a bulleted list!

::: columns
::: {.column width="50%"}
-   just
-   like
-   this
-   one
:::

::: {.column width="50%"}
1.  like

2.  this

3.  one
:::
:::

## Emphasis

-   To emphasize your point you might want to use *italics* or **bold**.

-   To have something appear as code (using a monospace font), surround
    everything that is code with ticks \`like this\`, so that it shows
    up `like this`.

## Code Blocks

-   One of the most useful things about markdown documents like this is
    that you can intersperse your writing with code!

For example, this R code:

```{r}
#| echo: true
#| 
# reticulate library allows you to run both 
# R and python in the same .qmd
library(reticulate)
#install_miniconda() # to install python

```

```{python}
#| echo: true
#| 

fruits = ['apple', 'banana', 'cherry']

fruits[0]

```

## Callout blocks

-   Call-out blocks highlight sections of text that interrupt the flow
    of your regular text. Maybe it's a definition, a warning, or a
    sidenote

-   When rendering your document to HTML, callout blocks are interactive
    and can be collapsed and opened.

    ::: {.callout-warning collapse="true"}
    ## My First Callout Block!

    Say things here
    :::

## Callout blocks

::: callout-note
## Note

Note that there are five types of callouts, including: `note`, `tip`,
`warning`, `caution`, and `important`.
:::

## Callout blocks

::: callout-warning
## Warning

Callouts provide a simple way to attract attention, for example, to this
warning.
:::

::: callout-important
## This is important

Danger, callouts will really improve your writing.
:::

::: callout-tip
## Tip with caption
:::

::: callout-caution
## Caution, under construction

Here is something under construction
:::

## Callout markdown syntax

::: {.callout-caution collapse="false"}
# Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by
the user. You can use \`collapse="true"\` to collapse it by default or
\`collapse="false"\` to make a collapsible callout that is expanded by
default.
:::

## Code chunks

-   `{r, eval=TRUE}` has been replaced with `#| eval = TRUE`

```{r}
#| echo: true
#| eval: false
print("Don't Run Me")
```

```{r}
#| eval = TRUE
print("Don't Run Me")
```

## Tabsets

Split up and flip between sections of a page, alternative to just two
columns

::: panel-tabset
## Element 1

```{r}
#| echo: true

library(ggplot2)
fig = ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess", se = FALSE)

```

## Element 2

```{r}
#| fig-width: 8
#| fig-heigh: 4
#| echo: true
#| fig-align: "center"

fig
```
:::

## Cheat Sheet

-   https://www.markdownguide.org/cheat-sheet/

## Papaja

![](img/papaja_hex.png){fig-align="center"}

## Installing papaja

```{r}
#| echo: true
# Install latest CRAN release
#install.packages("papaja")

# Install remotes package if necessary
#if(!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")

# Install the stable development version from GitHub
#remotes::install_github("crsh/papaja")

# Install the latest development snapshot from GitHub
#emotes::install_github("crsh/papaja@devel")


```

## Open papaja

![](img/open_papaja.png){fig-align="center"}

## APAQUARTO

-   Quarto version of `PAPAJA`

    -   Still in active development

<!-- -->

-   <https://github.com/wjschne/apaquarto>

## Papaja videos

::: columns
::: {.column width="50%"}
{{< video https://www.youtube.com/watch?v=dmB6sHDbs7Q&t=1s width="400" height="300" >}}
:::

::: {.column width="50%"}
{{< video https://www.youtube.com/watch?v=dmB6sHDbs7Q&t=1s width="400" height="300" >}}
:::
:::

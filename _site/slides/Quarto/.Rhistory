stars<-robustbase::starsCYG
head(stars)
lm(stars$log.light~stars$log.Te)
d=lm(stars$log.light~stars$log.Te)
check_model(d)
performance::check_model(d)
performance::check_outliers(d)
r=performance::check_outliers(d)
d=lm(log.light~log.Te, data=stars)
d
d=cor(log.light, log.Te, data=stars)
d=cor(stars$log.light, stars$log.T)
d
correlation::correlation(d)
correlation(stars, include_factors = TRUE, method = "auto")
correlation::correlation(stars, include_factors = TRUE, method = "auto")
correlation::correlation(stars, include_factors = TRUE, method = "ob")
correlation::correlation(stars, include_factors = TRUE, method = "percentage bend")
?correlation::correlation
correlation::correlation(stars, include_factors = TRUE, method = "percentage")
correlation::correlation(stars, include_factors = TRUE, winsorize = .2)
fac_data<-read_csv("https://raw.githubusercontent.com/jgeller112/psy503-psych_stats/master/static/assignment/data/fact_final.csv"
)
library(tidyverse)
fac_data<-read_csv("https://raw.githubusercontent.com/jgeller112/psy503-psych_stats/master/static/assignment/data/fact_final.csv")
aov(errors~convo*drive, data=fac_data)
d-aov(errors~convo*drive, data=fac_data)
d=aov(errors~convo*drive, data=fac_data)
performance::check_model()
performance::check_model(d)
performance::check_homogeneity(d)
performance::check_heteroscedasticity(d)
1000-200
1000+100
#| eval = false
#|
print("Don't Run Me")
#| eval = FALSE
#|
print("Don't Run Me")
reticulate::repl_python()

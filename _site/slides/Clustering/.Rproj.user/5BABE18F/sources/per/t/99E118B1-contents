---
title: "GCA-Metaphor"
output: html_document
date: "2022-08-24"
---

# GCA

__Resources__:

Mirman, D. (2014). Growth Curve Analysis and Visualization Using R. Chapman and Hall / CRC.

https://www.youtube.com/watch?v=JQvUoSG7d54

# Packages

```{r}

library(gazer)
library(optimx)
library(lme4)
library(afex)
library(datawizard)

```



# Extracting Orthogonal Polynomials

We use the `code_poly` function from `gazeR` to extract our 2nd order orthogonal polynomials. This appends two columns (poly1 and poly2) to the dataset. 

```{r}

df_gca <- code_poly(df=timebins1, predictor="timebins", poly.order = 2, orthogonal = TRUE, draw.poly = TRUE)

```


# Standardize Covars

The center from datawizard is used to standardize the covars. 

```{r}

df_gca <- datawizard::center(df_gca, exclude=c("subject", "Condition", "timebins", "sent", "aggbaseline", "timebins.Index", "per_base", "poly1", "poly2", "keyphrase_sent", "trial"))
```
# Contrast Coding

This gives us two contrasts: 

1. M vs. L 
2. M vs. C


```{r}
library(hypr)
 
sum_code <- hypr(M~L, M~C, levels=c("C", "L", "M")) # set contrast

df_gca$cond<-as.factor(df_gca$cond)

contrasts(df_gca$cond) <- contr.hypothesis(sum_code) # add to data
sum_code

```

# Fitting the Model

This model closely resembled the model from the paper

```{r}

library(optimx)
library(lme4)
library(afex)
library(broom.mixed)

control=lmerControl(optimizer = "optimx", calc.derivs = FALSE, 
                     optCtrl = list(method = "nlminb", starttests = FALSE, kkt = FALSE)) # this optimizer generally leads to better convergence than some of the others
#use mixed function from afex
p.trimmod1 <-lmer(agg_perc~(poly1+poly2)*cond +
                (1|subject)+(1|keyphrase_sent),  
              data=df_gca, REML=TRUE)

gca_pred <- augment(p.trimmod1)

```


# Graph GCA

We graph model fits which gives us an idea of how well the GCA model fits the data. 

```{r}

ggplot(dd, aes(x=timebins, y=agg_perc, color=cond))  +
  stat_summary(fun.data = mean_cl_boot, geom="point", size=0.2) + 
 geom_smooth(aes(y=.fitted), se=TRUE) +  theme_bw() +
  labs(y="Pupil Diameter Change (mm)", x="Time from Phrase Onset (ms)", color="Metaphoricity")

```



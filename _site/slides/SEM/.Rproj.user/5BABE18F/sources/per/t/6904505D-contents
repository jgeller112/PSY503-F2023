---
    title: "Lab 5 - Answers"
    author:
      - name: Jason Geller
    date: last-modified
    format:
      html:
        self-contained: true
        anchor-sections: true
        code-tools: true
        code-fold: true
        fig-width: 8
        fig-height: 4
        code-block-bg: "#f1f3f5"
        code-block-border-left: "#31BAE9"
        mainfont: Source Sans Pro
        theme: journal
        toc: true
        toc-depth: 3
        toc-location: left
        captions: true
        cap-location: margin
        table-captions: true
        tbl-cap-location: margin
        reference-location: margin
      pdf:
        pdf-engine: lualatex
        toc: false
        number-sections: true
        number-depth: 2
        top-level-division: section
        reference-location: document
        listings: false
        header-includes:
          \usepackage{marginnote, here, relsize, needspace, setspace}
          \def\it{\emph}

    comments:
      hypothesis: false

    execute:
      warning: false
      message: false
---

1.  To complete this lab:

-   Load packages

```{r}
library(MASS)
library(tidyverse)
library(emmeans)
library(ggeffects)
library(easystats)
library(performance)
library(knitr)
```

-   Download the dataset:

```{r}

library(tidyverse)

data <- read_delim("https://raw.githubusercontent.com/jgeller112/psy504-advanced-stats/main/slides/Poisson/data/2010.csv")

```

2\. Conduct the analysis described in the preregistration document

a.  The number of hours per week that a person spends on the Internet ("WWWHR") will\
    be predicted by their vocabulary ("WORDSUM"), age ("AGE"), sex ("SEX"), religiosity\
    ("RELITEN"), political orientation ("POLVIEWS"), and how often they work from home\
    ("WRKHOME").

```{r}

data_pos <- data %>%
  dplyr::select(wwwhr, wordsum, age, sex, reliten, polviews, wrkhome) %>%
  mutate(wwwhr=case_when(
    wwwhr==-1 ~ NA_real_, 
    wwwhr==998 ~ NA_real_, 
    wwwhr==999 ~ NA_real_,
    TRUE ~ wwwhr), 
    wordsum=case_when(
    wordsum==-1 ~ NA_real_,
    wordsum==99 ~ NA_real_, 
    TRUE ~ wordsum), 
    reliten=case_when(
    reliten==0 ~ NA_real_, 
    reliten==8 ~ NA_real_, 
    reliten==9 ~ NA_real_, 
    TRUE~reliten), 
    polviews=case_when(
    polviews==0 ~ NA_real_, 
    polviews==8 ~ NA_real_, 
    polviews==9 ~ NA_real_, 
    TRUE ~ polviews), 
    wrkhome=case_when(
    wrkhome==0 ~ NA_real_, 
    wrkhome==8 ~ NA_real_, 
    wrkhome==9 ~ NA_real_, 
    TRUE ~ wrkhome), 
    age = case_when(
    age == 0 ~ NA_real_,
    age == 98 ~ NA_real_,
    age == 99 ~ NA_real_,
    TRUE ~ age))
      
    

skimr::skim(data_pos)


```

## NANIAR

-   could use the `naniar` function `replace_with_na`

```{r}
library(naniar)

data_pos <- data %>%
  dplyr::select(wwwhr, wordsum, age, sex, reliten, polviews, wrkhome) %>%
replace_with_na(.,
             replace = list(wwwhr = c(-1, 998, 999),
                          wordsum = c(-1, 99),
                          reliten = c(0, 8, 9), 
             polviews = c(0, 8, 9), 
             wrkhome = c(0,8,9), 
             age=c(0, 98, 99)))

```

-   Recode sex as factor

```{r}

data_pos <- data_pos %>%
  mutate(sex=as.factor(sex))

```

-   Recode reliten

    ```{r}

    data_pos <- data_pos %>%
      mutate(reliten_recode = case_when(
        reliten==3 ~2, 
        reliten==2 ~ 3, 
        TRUE ~ reliten
      ))

    data_pos %>%
      select(reliten, reliten_recode)

    ```

## Multiple Imputation

We have a fair amount of NAs in our dataset. We could carry on as normal and conduct the analysis on complete data, but that is no fun. Instead let's work on some of the skills we have learned so far this semester.

We can use the `mice` package to impute the data.

Let's first see if our data has any any outliers and remove those

```{r}
pos_mod <- glm(wwwhr~wordsum+age+sex, reliten_recode+polviews+wrkhome, family=poisson(), data=data_pos)

outliers_list <- check_outliers(pos_mod) # Find outliers
outliers_list # Show the row index of the outliers
outliers_list <- as.numeric(outliers_list) # The object is a binary vector...

filtered_data <- as.data.frame(data_pos)[!outliers_list, ] # And can be used to filter a dataframe


```

Now let's impute the data 20 times

```{r}
library(mice)

data_mice <- mice(filtered_data, m=20, printFlag = F)

```

The tricky part here is deciding how to test our assumptions. If the data are MCAR, we can test assumptions on our completed data as there should not be any bias. If our data is MAR, we can use one of our imputed datasets. It has been recommended we look at a few different imputations. I think selecting one would be fine for this activity.

## Checking Assumptions

Let's select one of our imputed datasets, run a poisson regression, and check our assumptions. Let's go with the 8th imputed dataset.

```{r}

data_mice_data<- complete(data_mice, 8)

head(data_mice_data)

```

```{r}

pos_mod <- glm(wwwhr~wordsum+age+sex, reliten_recode+polviews+wrkhome, family=poisson, data=data_mice_data)

knitr::kable(tidy(pos_mod))


```

```{r}
library(performance)

check_overdispersion(pos_mod)


```

-   Our model appears to be over-dispersed. Let's fit a negative binomial!

    We are going to impute our data first. Then we will fit a negative binomial model.

-   Let's check if the negative binomial solved are problem:

    ```{r}

    library(MASS)

    pos_mod_nb <- glm.nb(wwwhr~wordsum+age+sex, reliten_recode+polviews+wrkhome, data=data_mice_data)

    check_overdispersion(pos_mod_nb)
    check_zeroinflation(pos_mod_nb)
    ```

    It did not. Seems like a zero-inflated poisson might be better.

-   For now, let's use the negative binomial for now.

    ```{r}

    data_mice <- mice::mice(filtered_data, m=20, printFlag = F)

    fit <- with(data_mice, MASS::glm.nb(wwwhr~wordsum+age+sex+reliten_recode+polviews+wrkhome))

    summary(fit)
    ```

## Pool

Next, we pool across the 20 imputations

::: panel-tabset
## Log Lambda

```{r}
result <- mice::pool(fit)
kable(tidy(result))
```

## Mean Count

```{r}

kable(tidy(result, exponentiate = TRUE))
```
:::

## Mice ANOVA

Because we are working with imputed data we need to pool and run our ANOVA. We can do this with the `miceadds` package. To get overall fit of our data we can use the `anova.mi` function.

```{r}

#| message: false
#| 

library(miceadds)
mi.res <- miceadds::mice.1chain(filtered_data, burnin=4, iter=20, Nimp=20 )

mi.anova(mi.res = mi.res, formula="wwwhr~wordsum+age+sex+reliten+polviews+wrkhome", type=2)
```

```{r}

emmeans(fit, "sex", regrid = "response") %>% pairs() %>%      kable(digits = 3, format = "markdown")

```

The analysis employed a negative binomial regression model in R to examine the relationship between sex, age, vocabulary, religious and political views, and time spent on the internet per hour. An over-dispersion test was conducted using the `performance` package in R to determine the appropriateness of the model. Due to missing data, imputation was performed (n = 20) using the mice package, and the pooled results across all imputations are reported.

The analysis revealed that each additional point in the vocabulary test was associated with an increase of 11% in the expected count of hours spent on the internet per week, incidence rate ratio (IRR) = 1.11, SE = .01, *p* \< .001, *d* = 1.11. Increases in religiosity and work-from-home frequency were also associated with increased time spent on the internet, IRR = 1.10, SE = .03, *p* \< .001, *d* = 1.10, and IRR = 1.06, SE = .02, *p* \< .001, *d* = 1.06 respectively. Relative to females, males in our dataset spent more hours online, IRR = 1.28, SE = .05, *p* \< .001, *d* = 1.28. Two variables, age and political orientation, were negatively associated with time spent on the internet. Older respondents and the more politically conservative spent less time online, IRR = .98, SE = .002, *p* \< .001, *d* = .98, and IRR = .96, SE = .02, *p* = .01, *d* = .96, respectively. A likelihood ratio test confirmed the significance of these estimates, as can be seen in **Table 1.**

```{r}

# plot the imputed data
  predictions <- lapply(1:20,function(i) {
    m <- MASS::glm.nb(wwwhr~wordsum+age+sex+reliten_recode+polviews+wrkhome, data = complete(data_mice, action = i))
    ggemmeans(m, "age")
  })
  pool_predictions(predictions) %>%
    plot()

 predictions <- lapply(1:20,function(i) {
    m <- MASS::glm.nb(wwwhr~wordsum+age+sex+reliten_recode+polviews+wrkhome, data = complete(data_mice, action = i))
    ggemmeans(m, "sex")
  })
  pool_predictions(predictions) %>%
    plot()


predictions <- lapply(1:20,function(i) {
    m <- MASS::glm.nb(wwwhr~wordsum+age+sex+reliten_recode+polviews+wrkhome, data = complete(data_mice, action = i))
    ggemmeans(m, "wordsum")
  })
  pool_predictions(predictions) %>%
    plot()

```
